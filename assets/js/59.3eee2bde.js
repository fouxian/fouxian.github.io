(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{515:function(e,t,a){"use strict";a.r(t);var r=a(34),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"文件系统-通知机制-会话-acl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件系统-通知机制-会话-acl"}},[e._v("#")]),e._v(" 文件系统/通知机制/会话/ACL")]),e._v(" "),a("blockquote",[a("p",[e._v("ZooKeeper 提供基于类似于 Linux 文件系统的目录节点树方式的数据模型，即分层命名空间；主要是用来维护和监控存储的数据状态变化，从而可以达到基于数据的集群管理。")])]),e._v(" "),a("h2",{attrs:{id:"zookeeper-znode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-znode"}},[e._v("#")]),e._v(" "),a("em",[a("strong",[e._v("Zookeeper Znode")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/kr/zookeeper/Zookeeper-Znode.png",alt:"Zookeeper-Znode"}}),e._v("\n一般认为 Zookeeper = 文件系统 + 通知机制，文件系统即是类似于 Linux 文件系统的目录节点树方式的数据模型，当节点数据变化时，通过通知机制通知监控该节点数据的客户端。\nZnode 类型：")]),e._v(" "),a("ul",[a("li",[e._v("持久节点：客户端与 Zookeeper 断开连接后，该节点依旧存在（创建后与客户端没有关系）")]),e._v(" "),a("li",[e._v("持久顺序节点：客户端与 Zookeeper 断开连接后，该节点依旧存在， 只是 Zookeeper 给该节点进行顺序编号")]),e._v(" "),a("li",[e._v("临时节点：客户端与 Zookeeper 断开连接后，该节点被删除（创建后客户端会话 ID 存入 ephermeralOwner）")]),e._v(" "),a("li",[e._v("临时顺序节点：客户端与 Zookeeper 断开连接后，该节点被删除，只是 Zookeeper 给该节点进行顺序编号")])]),e._v(" "),a("blockquote",[a("p",[e._v("在连接断了之后，ZK 不会马上移除临时节点，只有当会话超时过期之后，才会把这个会话建立的临时节点移除")]),e._v(" "),a("p",[e._v("Znode SEQUENTIAL(顺序标注)：当在某个节点下创建相同名称的子节点时，通过该节点序号计数器在子节点名称后面增加一个单调递增序号，以实现节点排序，顺序访问控制")])]),e._v(" "),a("h2",{attrs:{id:"zookeeper-watcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-watcher"}},[e._v("#")]),e._v(" "),a("em",[a("strong",[e._v("Zookeeper Watcher")])])]),e._v(" "),a("p",[e._v("观察者模式（发布订阅模式）：一个典型的发布/订阅模型系统定义了一种一对多的订阅关系，能够让多个订阅者同时监听某一个主题对象，当这个主题自身状态变化时，会通知所有订阅者，使它们能够做出相应的处理。")]),e._v(" "),a("p",[e._v("ZooKeeper 采用了观察者设计模式，ZooKeeper 允许客户端向服务端注册一个 Watcher 监听指定节点，当服务器的一些特定事件（节点变化）触发了这个 Watcher，那么就会向客户端发送事件通知来实现分布式的协调服务。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/kr/zookeeper/Zookeeper-Watcher.png",alt:"Zookeeper-Watcher"}}),e._v("\nZooKeeper Watcher 机制，分为三个过程：客户端注册 Watcher、服务器处理 Watcher 和客户端回调 Watcher")]),e._v(" "),a("ul",[a("li",[e._v("客户端注册 Watcher：通过构造方法或 getData/exists/getChildren 方法向服务端注册 Watcher 时，先将此消息传递给服务端，传递成功后服务端会通知客户端，然后客户端将该监听的节点路径和 Watcher 对应关系存储在 ZKWatchManager .dataWatches 中")]),e._v(" "),a("li",[e._v("服务器处理 Watcher：通过 WatchManager 来保存指定节点的 Watcher 监听，维护了两个集合\n"),a("ul",[a("li",[e._v("watchTable：表示从节点路径到 Watcher 集合的映射")]),e._v(" "),a("li",[e._v("watch2Paths：表示从 Watcher 到所有节点路径集合的映射")])])]),e._v(" "),a("li",[e._v("客户端回调 Watcher：客户端收到服务端的 WatcherEvent 事件后，遍历响应的 Watcher，进行串行同步处理")])]),e._v(" "),a("p",[e._v("Watcher 特性总结：")]),e._v(" "),a("ul",[a("li",[e._v("一次性：无论是服务端还是客户端，一旦一个 Watcher 被触发，ZooKeeper 都会将其从相应的集合中移除，减轻服务端性能消耗")]),e._v(" "),a("li",[e._v("客户端串行执行：客户端 Watcher 回调的过程是一个串行同步的过程，保证了顺序")]),e._v(" "),a("li",[e._v("轻量：WatcherEvent 是 ZooKeeper 整个 Watcher 通知机制的最小通知单元，只包含三部分内容：通知状态、事件类型和节点路径")])]),e._v(" "),a("p",[e._v("Watcher 注意事项：")]),e._v(" "),a("ul",[a("li",[e._v("发生连接断开后，只要会话没有超时过期，那么这个连接注册的 watches 依然在")]),e._v(" "),a("li",[e._v("节点数据的版本变化会触发 NodeDataChanged 事件，即使变化前后数据内容一致")]),e._v(" "),a("li",[e._v("对某个节点注册了watch，但是节点被删除了，那么注册在这个节点上的watches都会被移除")]),e._v(" "),a("li",[e._v("同一个客户端对某一个节点注册相同的 watch，只会收到一次通知")]),e._v(" "),a("li",[e._v("Watcher 对象只会保存在客户端，不会传递到服务端")])]),e._v(" "),a("h2",{attrs:{id:"zookeeper-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-session"}},[e._v("#")]),e._v(" "),a("em",[a("strong",[e._v("Zookeeper Session")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/kr/zookeeper/Zookeeper-Session.png",alt:"Zookeeper-Session"}}),e._v("\nZooKeeper 客户端中，配置了一个ZK 服务器列表。当启动时，首先去尝试连接其中一个服务器；如果尝试连接失败，那么会继续尝试连接下一个服务器，直到连接成功或者全部尝试连接失败")]),e._v(" "),a("blockquote",[a("p",[e._v("CONNECTIONLOSS(连接断开)：服务器和客户端之间维持的是一个长连接，当客户端与服务器之间连接断了(如连接的 ZK 服务器宕机)，客户端会主动在地址列表中选择新的地址进行连接")]),e._v(" "),a("p",[e._v("SESSIONEXPIRED(会话过期)：在 SESSION_TIMEOUT 内，服务器会通过心跳确定客户端是否正常连接，每次心跳都会重置 SESSION_TIMEOUT 时间；在正常情况下，Session 一直有效，并且 ZK 集群所有机器上都保存这个 Session 信息")])]),e._v(" "),a("p",[e._v("分桶策略：将类似的会话放在同一区块中进行管理，以便于 Zookeeper 对会话进行不同区块的隔离处理以及同一区块的统一处理")]),e._v(" "),a("p",[e._v("分配原则：每个会话的“下次超时时间点”（ExpirationTime）")]),e._v(" "),a("p",[e._v("计算公式：")]),e._v(" "),a("ul",[a("li",[e._v("ExpirationTime_ = currentTime + sessionTimeout")]),e._v(" "),a("li",[e._v("ExpirationTime = (ExpirationTime_ / ExpirationInrerval + 1) * ExpirationInterval")]),e._v(" "),a("li",[e._v("ExpirationInterval 是指 Zookeeper 会话超时检查时间间隔，默认 tickTime")])]),e._v(" "),a("h2",{attrs:{id:"zookeeper-acl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-acl"}},[e._v("#")]),e._v(" "),a("em",[a("strong",[e._v("Zookeeper ACL")])])]),e._v(" "),a("blockquote",[a("p",[e._v("每个节点都会有 ACL(Access Control List) 权限控制， ZooKeeper 通过鉴权来获得客户端的身份，然后通过 ACL 来控制客户端的访问")])]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/kr/zookeeper/Zookeeper-ACL.png",alt:"Zookeeper-ACL"}})]),e._v(" "),a("blockquote",[a("p",[e._v("注：exists 操作不受 ACL 控制，任何一个客户端都可通过 exists 来获得任何节点状态，从而得知节点是否真的存在")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("setAcl path acl \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 给已有节点赋予权限")]),e._v("\ncreate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("-s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("-e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" path data acl \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 在创建节点时候指定权限")]),e._v("\ngetAcl path\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看权限")]),e._v("\naddauth scheme auth \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 为当前 Session 添加用户认证信息，等价于登录操作")]),e._v("\naddauth digest heibai:root \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 示例：添加用户名为heibai,密码为root的用户认证信息")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])])])}),[],!1,null,null,null);t.default=o.exports}}]);