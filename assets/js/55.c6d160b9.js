(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{511:function(s,a,t){"use strict";t.r(a);var e=t(34),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"kafka-消费者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka-消费者"}},[s._v("#")]),s._v(" Kafka 消费者")]),s._v(" "),t("blockquote",[t("p",[s._v("消费者消费消息的默认分区分配策略：同一主题每一个分区只能被一个消费组中的一个消费者所消费")]),s._v(" "),t("p",[s._v("消费者与消费组模型可以让整体消费能力具备横向伸缩性，通过增加/减少消费者个数来提高/降低整体的消费能力")]),s._v(" "),t("p",[s._v("若所有消费者都隶属于同一个消费组，那么所有的消息都会被均衡地投递给每一个消费者，即每条消息只会被一个消费者处理，相当于点对点模式的应用")]),s._v(" "),t("p",[s._v("若所有消费者都隶属于不同的消费组，那么所有的消息都会被广播给所有的消费者，即每条消息会被所有的消费者处理，相当于发布/订阅模式的应用")])]),s._v(" "),t("p",[s._v("消息消费一般有两种模式：推模式和拉模式；推模式是服务端主动将消息推送给消费者，而拉模式是消费者主动向服务端发起请求来拉取消息；Kafka 消息消费属于拉模式。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消费者消费的消息对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecord")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" topic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息所属主题的名称")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" partition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息所在分区的编号")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息在所属分区的偏移量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" timestamp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 时间戳")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimestampType")]),s._v(" timestampType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 时间戳类型，CreateTime(消息创建的时间戳)，LogAppendTime(消息追加到日志的时间戳)")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Headers")]),s._v(" headers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"分区分配策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分区分配策略"}},[s._v("#")]),s._v(" 分区分配策略")]),s._v(" "),t("p",[s._v("一个消费者如何选定一个主题中多个分区中的一个分区？")]),s._v(" "),t("ul",[t("li",[s._v("Range：按照消费者总数和分区总数进行整除运算来获得一个跨度，然后将分区按照跨度进行平均分配，默认")]),s._v(" "),t("li",[s._v("RoundRobin（轮询）：将消费组内所有消费者及消费者订阅的所有主题的分区按照字典序排序，然后通过轮询方式逐个将分区依次分配给每个消费者")])]),s._v(" "),t("blockquote",[t("p",[s._v("分区再平衡：当主题新增或减少分区、消费组内某个消费者不可用时，则分区与消费者进行重新再分配；使得消费组保持高可用性和伸缩性。")])]),s._v(" "),t("p",[s._v("根据 Range 策略，分区按照顺序平铺，消费者按照顺序平铺，分区数量除以消费者数量等于 N，再分区数量对消费数量取余得到 M，kafka 的 Range 算法是前 M 个消费者能得到 N+1 个分区，剩余的消费者分配到 N 个分区。")]),s._v(" "),t("p",[s._v("具体算法：假设区分数量为 pCout，消费者数量为 cCount")]),s._v(" "),t("ul",[t("li",[s._v("n = pCout / cCount")]),s._v(" "),t("li",[s._v("m = pCount % cCount")])]),s._v(" "),t("p",[s._v("前 m 个消费者得到 n+1 个分区，剩余的消费者分配到 N 个分区")]),s._v(" "),t("h2",{attrs:{id:"自动提交偏移量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动提交偏移量"}},[s._v("#")]),s._v(" 自动提交偏移量")]),s._v(" "),t("p",[s._v("消费者通过向主题 ＿consumer_offset 提交消费消费的偏移量（消费位移：offset + 1），下次消费时，消费者需要读取每个分区最后一次提交的偏移量，以便继续从该偏移量消费；")]),s._v(" "),t("p",[s._v("消费者数据丢失或重复消费情况：")]),s._v(" "),t("ul",[t("li",[s._v("如果提交的偏移量小于客户端处理的最后一个消息的偏移量 ，那么处于两个偏移量之间的消息就会被重复消费")]),s._v(" "),t("li",[s._v("如果提交的偏移量大于客户端处理的最后一个消息的偏移量，那么处于两个偏移量之间的消息将会丢失")])]),s._v(" "),t("p",[s._v("自动提交偏移量：消费者通过指定的时间间隔定时提交偏移量；缺点：在两次提交偏移量间若发生分区再平衡，可导致消息重复消费")]),s._v(" "),t("h2",{attrs:{id:"手动提交偏移量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手动提交偏移量"}},[s._v("#")]),s._v(" 手动提交偏移量")]),s._v(" "),t("ul",[t("li",[s._v("手动提交当前偏移量：即手动提交当前轮询的最大偏移量")]),s._v(" "),t("li",[s._v("手动提交固定偏移量：即按照业务需求，提交某一个固定的偏移量")])]),s._v(" "),t("p",[s._v("两种提交方式：")]),s._v(" "),t("ul",[t("li",[s._v("同步提交：可失败重试，减低吞吐量")]),s._v(" "),t("li",[s._v("异步提交：不可也不能（若两次提交，后一次提交成功的偏移量将覆盖前一次提交成功的偏移量，且有可能后一次偏移量落后于前一次）自动重试，提高吞吐量")])]),s._v(" "),t("h2",{attrs:{id:"重复消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重复消费"}},[s._v("#")]),s._v(" 重复消费")]),s._v(" "),t("p",[s._v("已经消费了数据，但是 offset 提交失败，因素：消费系统宕机重启、连接断开、会话超时、分区再平衡等因素可能会造成消费者提交 offset 失败，几种场景：")]),s._v(" "),t("ul",[t("li",[s._v("Rebalance，一个 consumer 正在消费一个分区的一条消息，还没有消费完，发生了 rebalance (加入了一个 consumer)，从而导致这条消息没有消费成功，rebalance 后，另一个 consumer 又把这条消息消费一遍")]),s._v(" "),t("li",[s._v("消费者端手动提交，如果先消费消息，再更新 offset 位置，导致消息重复消费")]),s._v(" "),t("li",[s._v("消费者端自动提交，设置 offset 为自动提交，关闭 kafka 时，如果在 close 前，调用 consumer.unsubscribe() 则有可能部分 offset 没提交，下次重启会重复消费")]),s._v(" "),t("li",[s._v("生产者端，生产者因为业务问题导致的宕机，在重启之后可能数据会重发")])]),s._v(" "),t("h2",{attrs:{id:"漏消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#漏消费"}},[s._v("#")]),s._v(" 漏消费")]),s._v(" "),t("p",[s._v("自动提交\n设置offset为自动定时提交，当offset被自动定时提交时，数据还在内存中未处理，此时刚好把线程kill掉，那么offset已经提交，但是数据未处理，导致这部分内存中的数据丢失。")]),s._v(" "),t("ul",[t("li",[s._v("生产者发送消息：发送消息设置的是fire-and-forget（发后即忘），它只管往 Kafka 中发送消息而并不关心消息是否正确到达。不过在某些时候（比如发生不可重试异常时）会造成消息的丢失。这种发送方式的性能最高，可靠性也最差。")]),s._v(" "),t("li",[s._v("消费者端：先提交位移，但是消息还没消费完就宕机了，造成了消息没有被消费。自动位移提交同理")]),s._v(" "),t("li",[s._v("acks没有设置为all，如果在broker还没把消息同步到其他broker的时候宕机了，那么消息将会丢失")])])])}),[],!1,null,null,null);a.default=n.exports}}]);