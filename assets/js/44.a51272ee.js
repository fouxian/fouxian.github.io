(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{500:function(t,a,s){"use strict";s.r(a);var n=s(34),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"互斥同步-解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#互斥同步-解决方案"}},[t._v("#")]),t._v(" 互斥同步-解决方案")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%97%AE%E9%A2%98.png",alt:"并发编程-概念与问题"}})]),t._v(" "),s("blockquote",[s("p",[t._v("同步是一种更为复杂的互斥，而互斥是一种特殊的同步，同步是在互斥基础上实现顺序的访问控制")])]),t._v(" "),s("h2",{attrs:{id:"互斥锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁"}},[t._v("#")]),t._v(" 互斥锁")]),t._v(" "),s("p",[t._v("互斥锁（"),s("code",[t._v("Mutex Lock")]),t._v("）：采用互斥锁保护临界区，在进入临界区时获取锁"),s("code",[t._v("lock()")]),t._v("，在退出临界区时释放锁"),s("code",[t._v("unlock()")])]),t._v(" "),s("p",[t._v("当互斥锁加锁失败时，会从用户态切换到内核态，并让内核进行线程上下文切换，简化了锁的使用难度，但存在一定性能开销：")]),t._v(" "),s("ul",[s("li",[t._v("加锁失败时，内核将线程从「运行」状态设置为「睡眠」状态，阻塞线程，让出 CPU")]),t._v(" "),s("li",[t._v("当锁释放时，之前「睡眠」状态的线程被唤醒会变为「就绪」状态，内核会在合适时间调度 CPU 给该线程运行")])]),t._v(" "),s("blockquote",[s("p",[t._v("最简单的互斥锁：布尔/二进制互斥锁（独占锁），同一时刻只能有一个进程/线程进入临界区操作临界资源，该过程不可被中断，对临界资源的操作具有原子性")])]),t._v(" "),s("h2",{attrs:{id:"自旋锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自旋锁"}},[t._v("#")]),t._v(" 自旋锁")]),t._v(" "),s("p",[t._v("当一个进程无法请求到资源时，该进程要么忙等待（自旋，占用 CPU 等资源），要么阻塞（让出 CPU 等资源）;")]),t._v(" "),s("p",[t._v("互斥锁加锁失败时会进行线程阻塞，由内核完成两次线程上下文切换，当临界区执行时间比较短时或比线程切换的时间开销更短时，进行线程忙等待更好;")]),t._v(" "),s("p",[t._v("自旋锁：当互斥锁加锁失败时进行忙等待，占用 CPU 资源，但避免了线程上下文切换的性能开销，周期性检测锁的状态，直到获取锁成功\n"),s("img",{attrs:{src:"/images/kr/java/juc/%E8%87%AA%E6%97%8B%E9%94%81.png",alt:"自旋锁"}})]),t._v(" "),s("blockquote",[s("p",[t._v("自旋锁在单核 CPU 上无法使用，因为自旋的线程永远不会放弃 CPU，除非使用抢占式调度器（即可中断一个线程，运行其他线程）")])]),t._v(" "),s("h2",{attrs:{id:"信号量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#信号量"}},[t._v("#")]),t._v(" 信号量")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E4%BF%A1%E5%8F%B7%E9%87%8F-PV%E6%93%8D%E4%BD%9C.png",alt:"信号量-PV操作"}})]),t._v(" "),s("blockquote",[s("p",[t._v("二进制信号量：取值为 0/1，类似于互斥锁（理解为可用资源量为 1）")]),t._v(" "),s("p",[t._v("计数信号量：用于控制具有多个实例的某种资源，初值为资源可用数量，可以理解为多个资源的互斥锁（1 -> N）")]),t._v(" "),s("p",[t._v("信号量降级：信号量可用资源为 1 时，信号量降级为互斥锁（其实就是锁的粒度范围扩大了，并发性降低了）")])]),t._v(" "),s("p",[t._v("信号量通过一个同步队列存放所有 P 操作而阻塞的进程，并将进程状态切换到等待状态，等其它进程执行 V 操作后释放资源并唤醒同步队列的阻塞进程，进入就绪状态，等待 CPU 调度")]),t._v(" "),s("blockquote",[s("p",[t._v("信号量的正确使用不依赖于信号量同步队列的特定排队策略")]),t._v(" "),s("p",[t._v("对同一信号量的原子性保证：没有两个进程可以同时执行 PV 操作，这是一个临界区问题")]),t._v(" "),s("p",[t._v("信号量可以用于做流量控制，特别是公用资源有限的应用场景")])]),t._v(" "),s("h2",{attrs:{id:"管程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#管程"}},[t._v("#")]),t._v(" 管程")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://baike.baidu.com/item/%E7%AE%A1%E7%A8%8B/10503922?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[t._v("管程-百度百科"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Java 语言在 1.5 之前，提供的唯一并发原语就是管程，而且 1.5 之后提供的 JUC 并发包，也是以管程技术为基础的")]),t._v(" "),s("p",[s("code",[t._v("Synchronized")]),t._v("和"),s("code",[t._v("wait()")]),t._v("、"),s("code",[t._v("notify()")]),t._v("、"),s("code",[t._v("notifyAll()")]),t._v("这三个方法是 Java 中实现管程技术的组成部分")]),t._v(" "),s("p",[t._v("管程和信号量是等价的，即是用管程能够实现信号量，也能用信号量实现管程")]),t._v(" "),s("p",[t._v("管程指管理共享变量以及对共享变量操作的过程，让其支持并发。在 Java 领域就是管理类的成员变量和成员方法，让这个类是线程安全的")]),t._v(" "),s("p",[t._v("管程有 Hasen 模型、Hoare 模型和 MESA 模型，广泛使用的是 MESA 模型（Java 管程也是基于该模型）")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E7%AE%A1%E7%A8%8B.png",alt:"管程"}})]),s("div",{staticStyle:{height:"320px"}},[s("div",{staticStyle:{float:"left",width:"50%"}},[s("img",{attrs:{src:"/images/kr/java/juc/%E7%AE%A1%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E5%8C%96%E8%AF%AD%E4%B9%89.jpg",alt:"管程模型的代码化语义"}})]),t._v(" "),s("div",{staticStyle:{float:"right",width:"50%"}},[s("img",{attrs:{src:"/images/kr/java/juc/MESA%E7%AE%A1%E7%A8%8B.jpg",alt:"MESA管程"}})])]),s("p"),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/368008638",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考：管程"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("以队列（共享变量）及其对队列的操作：入队和出队为例，入队的条件变量：队列有空，出队的条件变量：队列非空")]),t._v(" "),s("p",[t._v("互斥：一次只能有一个线程进入管程通过某个操作方法对共享变量进行操作，达到互斥（即操作方法是互斥的）")]),t._v(" "),s("p",[t._v("同步：当线程在调用某个操作方法时，先判断某个条件变量是否满足，若满足则执行方法，\n若不满足则通过调用"),s("code",[t._v("wait()")]),t._v("进入条件变量对应的等待队列阻塞等待，此时其余线程可进入管程，\n当另一个线程进入管程后使得该条件变量满足了，则通过调用"),s("code",[t._v("notify()")]),t._v("/"),s("code",[t._v("notifyAll()")]),t._v("唤醒通知条件变量对应的等待队列中的线程，重新进入入口等待队列")])]),t._v(" "),s("h2",{attrs:{id:"对象监视锁-monitor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象监视锁-monitor"}},[t._v("#")]),t._v(" 对象监视锁 Monitor")]),t._v(" "),s("blockquote",[s("p",[t._v("Monitor，直译为“监视器”，而操作系统领域一般翻译为“管程”，是管程在 Java 中的实现")]),t._v(" "),s("p",[t._v("每个 Java 对象都可关联一个"),s("code",[t._v("Monitor")]),t._v("对象，如果使用"),s("code",[t._v("Synchronized")]),t._v("给该对象加重量级锁，该对象头的"),s("code",[t._v("Mark Word")]),t._v("就被设置指向"),s("code",[t._v("Monitor")]),t._v("对象的指针")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E5%AF%B9%E8%B1%A1%E7%9B%91%E8%A7%86%E9%94%81.png",alt:"对象监视锁Monitor"}}),t._v(" "),s("img",{attrs:{src:"/images/kr/java/juc/%E5%AF%B9%E8%B1%A1%E7%9B%91%E8%A7%86%E9%94%81-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",alt:"对象监视锁-数据结构"}})]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Monitor 是由 ObjectMonitor 实现的，其主要数据结构如下（位于 HotSpot 虚拟机源码 ObjectMonitor.hpp 文件，C++ 实现的）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectMonitor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _header       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _count        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录个数")]),t._v("\n    _waiters      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _recursions   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _object       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _owner        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前持有该锁的线程")]),t._v("\n    _WaitSet      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处于 wait 状态（不参与竞争，等待唤醒）的线程，会被加入到该表")]),t._v("\n    _WaitSetLock  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _Responsible  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _succ         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _cxq          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FreeNext")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _EntryList    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处于等待锁状态（参与竞争锁）的线程，会被加入到该表")]),t._v("\n    _SpinFreq     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _SpinClock    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OwnerIsThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("p",[t._v("线程访问同步代码的过程：")]),t._v(" "),s("ol",[s("li",[t._v("首先会进入 _EntryList 集合，当线程获取到对象锁 Monitor 后，进入 _Owner 并把 Monitor 中的 owner 变量设置为当前线程，同时 Monitor 中的计数器 count 加 1")]),t._v(" "),s("li",[t._v("若线程调用 wait()，将释放当前持有的 Monitor，owner 变量恢复为 null，count 自减 1，同时该线程进入 _WaitSet 集合中等待被唤醒")]),t._v(" "),s("li",[t._v("若当前线程执行完毕，也将释放 Monitor 并复位 count 值，以便其他线程进入获取 Monitor")])]),t._v(" "),s("blockquote",[s("p",[t._v("Thread.sleep()：调用该方法是不会让出监视锁")]),t._v(" "),s("p",[t._v("参考："),s("a",{attrs:{href:"https://www.icode9.com/content-1-1190242.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象锁"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" Synchronized")]),t._v(" "),s("blockquote",[s("p",[t._v("Synchronized 是一种独占锁，是一种悲观锁，是管程在 Java 中内置实现的锁，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁，效率不是很高。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/synchronized.png",alt:"synchronized"}})]),t._v(" "),s("h2",{attrs:{id:"wait-notify-等待通知机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait-notify-等待通知机制"}},[t._v("#")]),t._v(" wait/notify 等待通知机制")]),t._v(" "),s("p",[t._v("如果线程调用了"),s("code",[t._v("Object.wait()")]),t._v("，那么该线程会处于该对象的等待池（条件等待队列）中，等待池中的线程不会去竞争该对象的锁，\n当有线程调用了"),s("code",[t._v("Object.notify()")]),t._v("/"),s("code",[t._v("Object.notifyAll()")]),t._v("时，被唤醒的的线程会进入该对象的锁池（入口等待队列）中，锁池中的线程会去竞争该对象锁")]),t._v(" "),s("blockquote",[s("p",[t._v("wait()/notify() 需在 Synchronized 中调用，否则会抛出 java.lang.IllegalMonitorStateException")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/wait-notify.png",alt:"wait-notify"}})]),t._v(" "),s("h2",{attrs:{id:"aqs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[t._v("#")]),t._v(" AQS")]),t._v(" "),s("p",[t._v("AQS：AbstractQueuedSynchronizer，抽象队列同步器，用来构建锁和同步器的框架")]),t._v(" "),s("ul",[s("li",[t._v("Abstract：AQS 是一个抽象类，只实现一些主要的逻辑，有些方法推迟到子类实现")]),t._v(" "),s("li",[t._v("Queued：AQS 是用先进先出队列来存储数据的")]),t._v(" "),s("li",[t._v("Synchronizer：即 AQS是 实现同步功能的")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/AQS.png",alt:"AQS"}}),t._v(" "),s("img",{attrs:{src:"/images/kr/java/juc/CLH.png",alt:"CLH"}})]),t._v(" "),s("h2",{attrs:{id:"condition-条件机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#condition-条件机制"}},[t._v("#")]),t._v(" Condition 条件机制")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/Condition-%E6%9D%A1%E4%BB%B6%E6%9C%BA%E5%88%B6.png",alt:"Condition 条件机制"}})]),t._v(" "),s("h2",{attrs:{id:"同步器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步器"}},[t._v("#")]),t._v(" 同步器")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E5%90%8C%E6%AD%A5%E5%99%A8.png",alt:"同步器"}})]),t._v(" "),s("h2",{attrs:{id:"lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[t._v("#")]),t._v(" Lock")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/Lock.png",alt:"Lock"}})]),t._v(" "),s("blockquote",[s("p",[t._v("LockSupport：定义了一组的公共静态方法，提供了最基本的线程阻塞和唤醒功能")])]),t._v(" "),s("h2",{attrs:{id:"死锁-饥饿"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁-饥饿"}},[t._v("#")]),t._v(" 死锁/饥饿")]),t._v(" "),s("p",[t._v("死锁：一组进程内的每个进程都等待一个事件（比如资源的获取和释放），而该事件只可能由组内的另一个进程产生\n"),s("img",{attrs:{src:"/images/kr/java/juc/%E6%AD%BB%E9%94%81.png",alt:"死锁"}}),t._v("\n无限阻塞/饥饿：即进程无限等待信号量，如果对与信号量有关的同步队列按"),s("code",[t._v("LIFO 后进先出")]),t._v("顺序来阻塞和唤醒进程，那么可能发生无限阻塞")]),t._v(" "),s("h2",{attrs:{id:"锁的划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁的划分"}},[t._v("#")]),t._v(" 锁的划分")]),t._v(" "),s("ul",[s("li",[t._v("悲观锁/乐观锁：一种设计思想\n"),s("img",{attrs:{src:"/images/kr/java/juc/%E6%82%B2%E8%A7%82%E9%94%81-%E4%B9%90%E8%A7%82%E9%94%81.png",alt:"悲观锁-乐观锁"}})]),t._v(" "),s("li",[t._v("独占锁/共享锁：独占锁是指该锁一次只能被一个线程所持有，共享锁是指该锁可被多个线程所持有")]),t._v(" "),s("li",[t._v("可重入锁/不可重入锁：同一线程是否可重复获取该锁")]),t._v(" "),s("li",[t._v("公平锁/非公平锁：多个线程是否按照申请锁的顺序来获取锁")]),t._v(" "),s("li",[t._v("分段锁：设计目的是细化锁的粒度，当操作不需要更新整个数组时，就仅仅针对数组中的一项进行加锁操作（如 JDK7 ConcurrentHashMap）")]),t._v(" "),s("li",[t._v("偏向锁/轻量级锁/重量级锁：\n这三种锁是指锁的状态，并且是针对Synchronized。在Java 5通过引入锁升级的机制来实现高效Synchronized。这三种锁的状态是通过对象监视器在对象头中的字段来表明的。\n偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。\n轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。\n重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让他申请的线程进入阻塞，性能降低")]),t._v(" "),s("li",[t._v("自旋锁：自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU")])])])}),[],!1,null,null,null);a.default=r.exports}}]);