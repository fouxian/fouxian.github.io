(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{499:function(t,a,s){"use strict";s.r(a);var e=s(34),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"juc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#juc"}},[t._v("#")]),t._v(" JUC")]),t._v(" "),s("blockquote",[s("p",[t._v("并发编程的三个问题：")]),t._v(" "),s("ul",[s("li",[t._v("分工：如何高效地拆解任务并分配给线程")]),t._v(" "),s("li",[t._v("同步：线程之间如何协作")]),t._v(" "),s("li",[t._v("互斥：保证同一时刻只允许一个线程访问共享资源")])]),t._v(" "),s("p",[t._v("并发编程中，JMM 如何处理可见性、原子性和有序性？")])]),t._v(" "),s("h2",{attrs:{id:"硬件效率与缓存一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#硬件效率与缓存一致性"}},[t._v("#")]),t._v(" 硬件效率与缓存一致性")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84.jpg",alt:"计算机硬件结构"}})]),t._v(" "),s("blockquote",[s("p",[t._v("为了合理利用 CPU 高性能，平衡 CPU 、内存、I/O 设备之间的速度差异：")]),t._v(" "),s("ul",[s("li",[t._v("CPU 增加了高速缓存，以均衡与主内存的速度差异")]),t._v(" "),s("li",[t._v("操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异")]),t._v(" "),s("li",[t._v("编译程序优化指令执行次序，使得缓存能够得到更加合理地利用")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E7%A1%AC%E4%BB%B6%E6%95%88%E7%8E%87%E4%B8%8E%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.png",alt:"硬件效率与缓存一致性"}})]),t._v(" "),s("blockquote",[s("p",[t._v("缓存一致性解决方案：")]),t._v(" "),s("ul",[s("li",[t._v("总线锁机制：使用 CPU 提供的一个 LOCK# 信号，当一个处理器在总线上输出此信号，其他处理器的请求将被阻塞，那么该处理器就可以独占共享锁")]),t._v(" "),s("li",[t._v("缓存锁机制：总线锁开销太大，缓存锁的核心就是“缓存一致性协议”，不同的 CPU 硬件厂商实现方式稍有不同，有 MSI、MESI、MOSI 等")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("乱序执行优化")]),t._v("：处理器可能会对输入的代码进行"),s("code",[t._v("乱序执行")]),t._v("，处理器会在计算后重组乱序执行的结果，乱序优化可以保证在单线程下该执行结果与顺序执行的结果是一致的，但不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致")])]),t._v(" "),s("blockquote",[s("p",[t._v("乱序执行技术是处理器为提高运算速度而做出违背代码原有顺序的优化。在单核时代，处理器保证做出的优化不会导致执行结果远离预期目标，但在多核环境下却并非如此")]),t._v(" "),s("p",[t._v("禁止乱序执行优化：一种 CPU 指令（"),s("code",[t._v("内存屏障")]),t._v("/"),s("code",[t._v("内存栅栏")]),t._v("），消除乱序执行在多核环境下的坏影响")])]),t._v(" "),s("h2",{attrs:{id:"java-内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型"}},[t._v("#")]),t._v(" Java 内存模型")]),t._v(" "),s("blockquote",[s("p",[t._v("Java 内存模型规范了 JVM 如何提供"),s("code",[t._v("按需禁用缓存")]),t._v("（解决"),s("code",[t._v("可见性")]),t._v("问题）和"),s("code",[t._v("编译优化")]),t._v("（解决"),s("code",[t._v("有序性")]),t._v("问题）的方法，具体包括 "),s("code",[t._v("volatile")]),t._v("、"),s("code",[t._v("synchronized")]),t._v(" 和 "),s("code",[t._v("final")]),t._v(" 三个关键字，以及六项 "),s("code",[t._v("Happens-Before")]),t._v(" 规则")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E4%B8%BB%E5%86%85%E5%AD%98%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98.jpg",alt:"主内存和工作内存"}}),t._v(" "),s("img",{attrs:{src:"/images/kr/java/juc/Java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png",alt:"Java 内存模型"}})]),t._v(" "),s("h2",{attrs:{id:"内存屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[t._v("#")]),t._v(" 内存屏障")]),t._v(" "),s("p",[s("code",[t._v("i++")]),t._v(" 对应 4 条字节码指令：（i++ 不具备原子性）")]),t._v(" "),s("ul",[s("li",[t._v("getfield：获取原始值")]),t._v(" "),s("li",[t._v("iconst_1：将值入栈")]),t._v(" "),s("li",[t._v("iadd：进行加 1 操作")]),t._v(" "),s("li",[t._v("putfield：把 iadd 后的值写回主内存")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 双重检查创建单例对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("new 一个对象分三步：（不具备原子性）")]),t._v(" "),s("ul",[s("li",[t._v("给 instance 分配内存")]),t._v(" "),s("li",[t._v("调用 instance 的构造函数来初始化对象")]),t._v(" "),s("li",[t._v("将 instance 对象指向分配的内存空间")])]),t._v(" "),s("p",[t._v("以上操作通过指令重排后，第二步和第三步调换了，当在 new 该对象时，还没有来得及初始化，此时访问 instance 的成员变量就可能触发空指针异常")]),t._v(" "),s("blockquote",[s("p",[t._v("Java 通过"),s("code",[t._v("内存屏障")]),t._v("保证底层操作的有序性和可见性：")]),t._v(" "),s("ul",[s("li",[t._v("内存屏障是被插入两个 CPU 指令之间的一种指令，用来禁止处理器指令发生重排序，保障有序性")]),t._v(" "),s("li",[t._v("内存屏障也会使处理器写入、读取值前，将主内存的值写入高速缓存，清空无效队列，保障可见性")])])]),t._v(" "),s("p",[t._v("常见四种屏障：")]),t._v(" "),s("ul",[s("li",[t._v("LoadLoad 屏障：在该屏障后的读取操作执行前，保证屏障前的读取操作读取的数据被读取完毕")]),t._v(" "),s("li",[t._v("StoreStore 屏障：在屏障后的写入操作执行前，保证屏障前的写入操作对其它处理器可见")]),t._v(" "),s("li",[t._v("LoadStore 屏障：在屏障后的写入操作执行前，保证屏障前的读取操作读取的数据被读取完毕")]),t._v(" "),s("li",[t._v("StoreLoad 屏障：在屏障后的所有读取操作执行前，保证屏障后的写入对所有处理器可见，这个屏障也被称为全能屏障，兼具其它三种内存屏障的功能")])]),t._v(" "),s("h2",{attrs:{id:"轻量级同步机制-volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轻量级同步机制-volatile"}},[t._v("#")]),t._v(" 轻量级同步机制 Volatile")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/volatile.png",alt:"volatile"}})]),t._v(" "),s("h2",{attrs:{id:"锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),s("h3",{attrs:{id:"锁原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁原理"}},[t._v("#")]),t._v(" 锁原理")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E9%94%81%E5%8E%9F%E7%90%86.png",alt:"锁原理"}})]),t._v(" "),s("h3",{attrs:{id:"synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" Synchronized")]),t._v(" "),s("blockquote",[s("p",[t._v("Synchronized 是一种独占锁，是一种悲观锁， 会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁，效率不是很高。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/synchronized.png",alt:"synchronized"}})]),t._v(" "),s("h3",{attrs:{id:"锁优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁优化"}},[t._v("#")]),t._v(" 锁优化")]),t._v(" "),s("blockquote",[s("p",[t._v("锁主要存在四种状态：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁。但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级。")])]),t._v(" "),s("blockquote",[s("p",[t._v("每种锁是只能升级，不能降级，即由偏向锁 -> 轻量级锁 -> 重量级锁，而这个过程就是性能开销逐渐加大的过程。")]),t._v(" "),s("ul",[s("li",[t._v("如果是单线程使用，那偏向锁毫无疑问代价最小，并且它就能解决问题，连 CAS 都不用做，仅仅在内存中比较下对象头就可以了")]),t._v(" "),s("li",[t._v("如果出现了其他线程竞争，则偏向锁就会升级为轻量级锁")]),t._v(" "),s("li",[t._v("如果其他线程通过一定次数的 CAS 尝试没有成功，则进入重量级锁")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("锁")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("优点")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("缺点")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("应用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("偏向锁")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("加锁与解锁基本不消耗资源")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("如果存在线程竞争则撤销锁需要额外的消耗")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("只有一个线程访问同步块的情景")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("轻量级锁")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("竞争锁不需要线程切换，提供了执行效率")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("如果存在大量线程竞争锁，自旋会消耗CPU资源")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("追求响应时间。适用于少量线程访问同步块，追求访问同步块的速度")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("重量级锁")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("线程不需要自旋，不会消耗过多cpu资源")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("线程切换需要消耗大量资源，线程阻塞，执行缓慢")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("追求吞吐量。同步块执行时间较长的情况")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E9%94%81%E4%BC%98%E5%8C%96.png",alt:"锁优化"}})]),t._v(" "),s("p",[t._v("常见锁优化方案：")]),t._v(" "),s("ul",[s("li",[t._v("减少锁持有时间：尽可能减少同步代码块，加快同步代码块执行速度。")]),t._v(" "),s("li",[t._v("减少锁的粒度：分段锁概念")]),t._v(" "),s("li",[t._v("锁粗化")]),t._v(" "),s("li",[t._v("锁分离（读写锁）")]),t._v(" "),s("li",[t._v("使用CAS + 自旋的形式")]),t._v(" "),s("li",[t._v("消除缓存行的伪共享")])]),t._v(" "),s("h3",{attrs:{id:"lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[t._v("#")]),t._v(" Lock")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/Lock.png",alt:"Lock"}})]),t._v(" "),s("blockquote",[s("p",[t._v("LockSupport：定义了一组的公共静态方法，提供了最基本的线程阻塞和唤醒功能")])]),t._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h2",{attrs:{id:"atomic-原子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomic-原子类"}},[t._v("#")]),t._v(" Atomic 原子类")]),t._v(" "),s("p",[t._v("Atomic 原子类可以保证多线程环境下，当某个线程在执行 Atomic 的方法时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，再由 JVM 从等待队列中选择一个线程执行。")]),t._v(" "),s("blockquote",[s("p",[t._v("Atomic 类在软件层面上是非阻塞的，它的原子性其实是在硬件层面上借助相关的指令来保证的。")])]),t._v(" "),s("p",[s("code",[t._v("java.util.concurrent.atomic")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("基本类型：AtomicBoolean，AtomicInteger，AtomicLong")]),t._v(" "),s("li",[t._v("数组类型：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray")]),t._v(" "),s("li",[t._v("引用类型：AtomicReference，AtomicMarkableReference，AtomicStampedReference")]),t._v(" "),s("li",[t._v("对象的属性修改类型（原子化对象属性更新器）：AtomicIntegerFieldUpdater，AtomicLongFieldUpdater，AtomicReferenceFieldUpdater")]),t._v(" "),s("li",[t._v("JDK1.8 新增（原子化的累加器）：DoubleAccumulator、LongAccumulator、DoubleAdder、LongAdder、Striped64")])]),t._v(" "),s("blockquote",[s("p",[t._v("Atomic 中方法 compareAndSet 采用了 CAS 确保原子性")])]),t._v(" "),s("h2",{attrs:{id:"cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[t._v("#")]),t._v(" CAS")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java魔法类：Unsafe应用解析"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/CAS.png",alt:"CAS"}})]),t._v(" "),s("h2",{attrs:{id:"wait-notify-等待通知机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait-notify-等待通知机制"}},[t._v("#")]),t._v(" wait/notify 等待通知机制")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/wait-notify.png",alt:"wait-notify"}})]),t._v(" "),s("h2",{attrs:{id:"condition-条件机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#condition-条件机制"}},[t._v("#")]),t._v(" Condition 条件机制")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/Condition-%E6%9D%A1%E4%BB%B6%E6%9C%BA%E5%88%B6.png",alt:"Condition-条件机制"}})]),t._v(" "),s("h2",{attrs:{id:"抽象队列同步器-aqs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象队列同步器-aqs"}},[t._v("#")]),t._v(" 抽象队列同步器 - AQS")]),t._v(" "),s("p",[t._v("AQS：AbstractQueuedSynchronizer，抽象队列同步器，用来构建锁和同步器的框架")]),t._v(" "),s("ul",[s("li",[t._v("Abstract：AQS 是一个抽象类，只实现一些主要的逻辑，有些方法推迟到子类实现")]),t._v(" "),s("li",[t._v("Queued：AQS 是用先进先出队列来存储数据的")]),t._v(" "),s("li",[t._v("Synchronizer：即 AQS是 实现同步功能的")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/AQS.png",alt:"AQS"}}),t._v(" "),s("img",{attrs:{src:"/images/kr/java/juc/CLH.png",alt:"CLH"}})]),t._v(" "),s("h2",{attrs:{id:"同步容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步容器"}},[t._v("#")]),t._v(" 同步容器")]),t._v(" "),s("p",[t._v("同步容器：理解为通过 Synchronized 来实现同步的容器：")]),t._v(" "),s("ul",[s("li",[t._v("Vector：Vector 与 ArrayList 基本一致，只是 Vertor 采用 Synchronized 实现方法同步")]),t._v(" "),s("li",[t._v("Stack：Stack 是 Vertor 的子类，在出栈入栈等操作都进行了 Synchronized 同步")]),t._v(" "),s("li",[t._v("HashTable：HashTable 与 HashMap 基本一致，HashTable 采用 Synchronized 实现方法同步")]),t._v(" "),s("li",[t._v("Collections.synchronizedXXX")])]),t._v(" "),s("blockquote",[s("p",[t._v("同步容器通过 Synchroized 实现；削弱了并发性，竞争容器级别的锁时，降低吞吐量。")])]),t._v(" "),s("h2",{attrs:{id:"并发容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发容器"}},[t._v("#")]),t._v(" 并发容器")]),t._v(" "),s("h3",{attrs:{id:"concurrenthashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[t._v("#")]),t._v(" ConcurrentHashMap")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/ConcurrentHashMap.png",alt:"ConcurrentHashMap"}})]),t._v(" "),s("h3",{attrs:{id:"copyonwritearraylist-copyonwritearrayset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearraylist-copyonwritearrayset"}},[t._v("#")]),t._v(" CopyOnWriteArrayList/CopyOnWriteArraySet")]),t._v(" "),s("blockquote",[s("p",[t._v("Copy-On-Write 机制：对一块内存进行修改时，不在原有内存中进行写操作，而是将内存拷贝一份，在新的内存中进行写操作，写完后，再将指向原来内存指针指向新的内存，原来的内存就可以被回收掉")])]),t._v(" "),s("p",[t._v("CopyOnWriteArrayList：底层是动态数组、通过 "),s("code",[t._v("ReentrantLock")]),t._v(" 保证同步，实现机制是在对容器写操作时，copy 出一份副本数组，完成操作后将副本数组引用赋值给容器，适用场景：")]),t._v(" "),s("ul",[s("li",[t._v("集合中数据不是特别多，因为涉及到写时复制")]),t._v(" "),s("li",[t._v("读多写少的场景，因为读操作不加锁，写（增、删、改）操作加锁")])]),t._v(" "),s("blockquote",[s("p",[t._v("局限性：通过牺牲容器的一致性（在 copy 期间读到的是旧数据）来换取容器的高并发效率，所以不适合强一致性的场景")])]),t._v(" "),s("p",[t._v("CopyOnWriteArraySet：基于 CopyOnWriteArrayList 实现的，适合场景：")]),t._v(" "),s("ul",[s("li",[t._v("Set 大小通常保持很小")]),t._v(" "),s("li",[t._v("只读操作远多于可变操作（可变操作（add()、set()和 remove()等等的开销很大）")])]),t._v(" "),s("h3",{attrs:{id:"concurrentskiplistmap-concurrentskiplistset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrentskiplistmap-concurrentskiplistset"}},[t._v("#")]),t._v(" ConcurrentSkipListMap/ConcurrentSkipListSet")]),t._v(" "),s("blockquote",[s("p",[t._v("SkipList：跳表，跳表是一种空间换时间的数据结构，通过冗余数据，将链表一层一层索引，达到类似二分查找的效果，其数据元素默认按照 key 值升序，天然有序，运用的场景特别多，Redis 中的 Zset 就是跳表实现的")])]),t._v(" "),s("ul",[s("li",[t._v("ConcurrentSkipListMap：基于 skip list 实现有序存储的 Map，比加锁的 TreeMap 效率高")]),t._v(" "),s("li",[t._v("ConcurrentSkipListSet：基于 ConcurrentNavigableMap 实现的，并发版的 TreeSet，只是有序且线程安全的")])]),t._v(" "),s("h3",{attrs:{id:"非阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞队列"}},[t._v("#")]),t._v(" 非阻塞队列")]),t._v(" "),s("blockquote",[s("p",[t._v("非阻塞队列可以用循环 CAS 的方式来保证数据的一致性，来达到线程安全的目的")])]),t._v(" "),s("ul",[s("li",[t._v("ConcurrentLinkedQueue：基于链表实现的无界线程安全队列，遵循队列的 FIFO 原则，队尾入队，队首出队，使用乐观锁（CAS）保证线程安全")]),t._v(" "),s("li",[t._v("ConcurrentLinkedDeque：基于双向链表实现的双端并发队列，可以分别对头尾进行操作，因此除了先进先出（FIFO），也可以先进后出（FILO）")])]),t._v(" "),s("blockquote",[s("p",[t._v("ConcurrentLinkedQueue、ConcurrentLinkedDeque 均采用了无锁算法，底层基于 "),s("strong",[t._v("自旋 + CAS")]),t._v(" 的方式实现线程安全")])]),t._v(" "),s("h3",{attrs:{id:"阻塞队列-blockingqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列-blockingqueue"}},[t._v("#")]),t._v(" 阻塞队列 - BlockingQueue")]),t._v(" "),s("ul",[s("li",[t._v("DelayQueue：延时队列，无界阻塞队列\n"),s("ul",[s("li",[t._v("用于放置实现了 Delayed 接口的对象，其中对象只能在其到期时从队列中取走")]),t._v(" "),s("li",[t._v("这种队列是有序的，即队头对象的延迟到期时间最长")])])]),t._v(" "),s("li",[t._v("ArrayBlockingQueue：基于数组实现的有界阻塞队列，有界且固定，其大小由构造函数决定，确认后就不再改变")]),t._v(" "),s("li",[t._v("LinkedBlockingQueue：基于单向链表实现的无界阻塞队列")]),t._v(" "),s("li",[t._v("LinkedBlockingDeque：基于双向链表实现的无界阻塞队列")]),t._v(" "),s("li",[t._v("PriorityBlockingQueue：支持优先级排序的无界阻塞队列\n"),s("ul",[s("li",[t._v("元素默认采用自然顺序升序排列，但无法保证同优先级元素的顺序")]),t._v(" "),s("li",[t._v("自定义类实现 compareTo() 方法来指定元素排序规则，或初始化时，指定构造参数 Comparator 来对元素进行排序")]),t._v(" "),s("li",[t._v("基于最小二叉堆实现，使用基于 CAS 实现的自旋锁来控制队列的动态扩容，保证了扩容操作不会阻塞 take 操作的执行")])])]),t._v(" "),s("li",[t._v("SynchronousQueue：不存储元素的阻塞队列，即是单个元素的队列\n"),s("ul",[s("li",[t._v("每一个 put 操作必须等待一个 take 操作，否则不能继续添加元素")]),t._v(" "),s("li",[t._v("SynchronousQueue 的吞吐量高于 LinkedBlockingQueue 和 ArrayBlockingQueue")])])]),t._v(" "),s("li",[t._v("LinkedTransferQueue：基于链表实现的无界阻塞队列\n"),s("ul",[s("li",[t._v("采用一种预占模式，就是消费者线程取元素时，如果队列不为空，则直接取走数据")]),t._v(" "),s("li",[t._v("若队列为空，那就生成一个节点（节点元素为 NULL）入队，然后消费者线程被等待在这个节点上")]),t._v(" "),s("li",[t._v("生产者线程入队时发现有一个元素为 NULL 的节点，生产者线程就不入队，直接就将元素填充到该节点，并唤醒该节点等待的线程")]),t._v(" "),s("li",[t._v("被唤醒的消费者线程取走元素，从调用的方法返回")])])])]),t._v(" "),s("h2",{attrs:{id:"threadlocal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[t._v("#")]),t._v(" ThreadLocal")]),t._v(" "),s("blockquote",[s("p",[t._v("ThreadLocal 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即变量在线程间隔离而在方法或类间共享的场景")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/ThreadLocal.png",alt:"ThreadLocal"}})]),t._v(" "),s("h2",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A6%82%E8%BF%B0.png",alt:"线程池概述"}}),t._v(" "),s("img",{attrs:{src:"/images/kr/java/juc/Executor.png",alt:"Executor"}})]),t._v(" "),s("blockquote",[s("p",[t._v("Executor 接口思想：将任务提交和任务执行进行解耦，用户无需关注线程创建与调度，只需提供 Runnable 对象，将任务的运行逻辑提交到执行器(Executor)中，由 Executor 完成线程的调度和任务的执行。")])]),t._v(" "),s("h3",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[t._v("线程池将线程和任务解耦，缓冲任务，复用线程；主要分成两部分：任务管理、线程管理")]),t._v(" "),s("ol",[s("li",[t._v("任务管理：当任务提交后，线程池会判断该任务后续的流转：")])]),t._v(" "),s("ul",[s("li",[t._v("直接申请线程执行该任务")]),t._v(" "),s("li",[t._v("缓冲到队列中等待线程执行")]),t._v(" "),s("li",[t._v("拒绝该任务")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("线程管理：根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新任务执行，当没有任务时，非核心空闲线程在存活时间结束后被回收")])]),t._v(" "),s("blockquote",[s("p",[t._v("线程池生命周期：")]),t._v(" "),s("p",[t._v("线程池内部使用一个变量维护两个值：运行状态（runState）和线程数量 (workerCount)，如："),s("code",[t._v("ThreadPoolExecutor")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，高 3 位保存 runState，低 29 位保存 workerCount")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" ctl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ctlOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RUNNING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("线程池运行状态：")]),t._v(" "),s("ul",[s("li",[t._v("RUNNING：接受新任务并处理排队任务")]),t._v(" "),s("li",[t._v("STOP：不接受新任务，不处理排队任务，并中断正在运行的任务")]),t._v(" "),s("li",[t._v("SHUTDOWN：不接受新任务，但处理排队任务")]),t._v(" "),s("li",[t._v("TIDYING：所有任务已经终止，有效线程为零")]),t._v(" "),s("li",[t._v("TERMINATED：terminate() 方法运行完成")])])]),t._v(" "),s("blockquote",[s("p",[t._v("任务调度：所有任务的调度都是由 execute 方法完成，工作：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务")]),t._v(" "),s("ul",[s("li",[t._v("首先检测线程池运行状态，如果不是 RUNNING，则直接拒绝，线程池要保证在 RUNNING 的状态下执行任务")]),t._v(" "),s("li",[t._v("如果 workerCount < corePoolSize，则创建并启动一个线程来执行新提交的任务")]),t._v(" "),s("li",[t._v("如果 workerCount >= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中")]),t._v(" "),s("li",[t._v("如果workerCount >= corePoolSize && workerCount < maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务")]),t._v(" "),s("li",[t._v("如果 workerCount >= maximumPoolSize，并且线程池内的阻塞队列已满， 则根据拒绝策略来处理该任务，默认的处理方式是直接抛异常")])])]),t._v(" "),s("blockquote",[s("p",[t._v("任务缓冲：阻塞队列缓存任务，工作线程从阻塞队列中获取任务，阻塞队列（BlockingQueue）是一个支持两个附加操作的队列:")]),t._v(" "),s("ul",[s("li",[t._v("在队列空时，获取元素的线程会等待队列变为非空")]),t._v(" "),s("li",[t._v("当队列满时，存储元素的线程会等待队列可用")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97.png",alt:"线程池-阻塞队列"}})])]),t._v(" "),s("blockquote",[s("p",[t._v("任务拒绝：当线程池的任务缓存队列已满，并且线程池中的线程数目达到 maximumPoolSize 时，采取任务拒绝策略拒绝任务，保护线程池")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rejectedExecution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("AbortPolicy：拒绝任务，直接抛出 "),s("code",[t._v("RegectedExcutionException")]),t._v(" 异常，默认策略")]),t._v(" "),s("li",[t._v("DiscardPolicy:直接丢弃任务，不处理也不抛出异常")]),t._v(" "),s("li",[t._v("DiscardOldestPolicy：抛弃队列中等待最久的任务")]),t._v(" "),s("li",[t._v("CallerRunsPolicy：交给线程池调用者所在的线程进行处理，不抛弃任务，也不抛出异常，而是将某些任务回退到调用者")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E4%BB%BB%E5%8A%A1%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5.png",alt:"任务拒绝策略"}})])]),t._v(" "),s("h3",{attrs:{id:"threadpoolexecutor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor"}},[t._v("#")]),t._v(" ThreadPoolExecutor")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" maximumPoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" maximumPoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" corePoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" keepAliveTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" threadFactory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" handler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NullPointerException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("acc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSecurityManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessController")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("corePoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maximumPoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("workQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keepAliveTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNanos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threadFactory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/ThreadPoolExecutor.png",alt:"ThreadPoolExecutor"}})]),t._v(" "),s("h3",{attrs:{id:"常见线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见线程池"}},[t._v("#")]),t._v(" 常见线程池")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/kr/java/juc/%E5%B8%B8%E8%A7%81%E7%BA%BF%E7%A8%8B%E6%B1%A0.png",alt:"常见线程池"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);