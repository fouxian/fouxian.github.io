(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{510:function(a,t,v){"use strict";v.r(t);var _=v(34),s=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"kafka-架构与日志存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kafka-架构与日志存储"}},[a._v("#")]),a._v(" Kafka 架构与日志存储")]),a._v(" "),v("p",[a._v("Kafka：一个采用 Scala 开发的多分区、多副本且基于 Zookeeper 分布式协调的流式处理平台，以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用")]),a._v(" "),v("ul",[v("li",[a._v("消息系统：具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性、消息顺序性保障及回溯消费的功能")]),a._v(" "),v("li",[a._v("存储系统：依赖消息持久化功能和多副本机制，将数据保留策略设置为“永久”或启用主题的日志压缩功能，实现消息持久化")]),a._v(" "),v("li",[a._v("流式处理平台：为流式处理框架提供了可靠的数据来源，还提供完整的流式处理类库")])]),a._v(" "),v("p",[a._v("消息投递两种模式(Kafka 同时支持)：点对点(一对一，基于队列，消息消费后清除)，发布订阅(一对多，基于主题，消息消费后保留)")]),a._v(" "),v("h2",{attrs:{id:"体系架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#体系架构"}},[a._v("#")]),a._v(" 体系架构")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/kr/kafka/kafka-%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84.jpg",alt:"Kafka-体系架构"}})]),a._v(" "),v("h2",{attrs:{id:"主题分区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主题分区"}},[a._v("#")]),a._v(" 主题分区")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/kr/kafka/Kafka-%E4%B8%BB%E9%A2%98%E5%88%86%E5%8C%BA.png",alt:"Kafka-主题分区"}})]),a._v(" "),v("h2",{attrs:{id:"副本机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#副本机制"}},[a._v("#")]),a._v(" 副本机制")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/kr/kafka/Kafka-%E5%89%AF%E6%9C%AC.png",alt:"Kafka-副本"}})]),a._v(" "),v("h2",{attrs:{id:"日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[a._v("#")]),a._v(" 日志")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/kr/kafka/Kafka-%E6%97%A5%E5%BF%97.png",alt:"Kafka-日志"}})]),a._v(" "),v("h2",{attrs:{id:"日志分段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日志分段"}},[a._v("#")]),a._v(" 日志分段")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/kr/kafka/Kafka-%E6%97%A5%E5%BF%97%E5%88%86%E6%AE%B5.png",alt:"Kafka-日志分段"}}),a._v("\n::: info")]),a._v(" "),v("ul",[v("li",[a._v("消息以主题进行归类，逻辑上相互独立，一个主题可划分多个分区（关键参数：分区数）")]),a._v(" "),v("li",[a._v("消息以分区二次归类，提供可伸缩性/水平扩展能力，分区多副本机制提高数据可靠性（关键参数：副本因子）")]),a._v(" "),v("li",[a._v("每个分区副本对应一个 log 文件（形如 topic-partition 文件夹），为防止 log 文件过大，采用分段和索引机制\n向分区追加消息时是按顺序写入，只有最后一个日志分段才能执行写入操作")]),a._v(" "),v("li",[a._v("每个分段包含一个分段日志（.log）、及对应的偏移量索引文件（.index）、时间戳索引文件（.timeindex）\n分段的日志文件和索引文件以该分段基准偏移量（该日志分段第一条消息的偏移量）命名\n:::")])]),a._v(" "),v("h2",{attrs:{id:"日志存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日志存储"}},[a._v("#")]),a._v(" 日志存储")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/kr/kafka/Kafka-%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8.jpg",alt:"Kafka-日志存储"}})]),a._v(" "),v("blockquote",[v("p",[a._v("偏移量索引文件：建立消息偏移量（offset）到物理地址之间的映射关系，方便快速定位消息所在的物理文件位置")]),a._v(" "),v("p",[a._v("时间戳索引文件：根据指定的时间戳（timestamp）来查找对应的偏移量信息")]),a._v(" "),v("p",[a._v("稠密索引：每个消息在索引文件中都有各自对应的索引项，索引密度高，占用空间大，查询效率高")]),a._v(" "),v("p",[a._v("稀疏索引：按一定的消息量在索引文件中建立对应的索引项，索引密度低，占用空间小，查询效率低")]),a._v(" "),v("p",[a._v("Kafka 索引文件以稀疏索引（默认4KB消息建一次索引）方式构造消息的索引")]),a._v(" "),v("p",[a._v("稀疏索引通过 MappedByteBuffer(MBB) 将索引文件映射到内存中，并基于二分查找加快索引的查询速度")])]),a._v(" "),v("p",[a._v("偏移量索引项格式（8个字节）：")]),a._v(" "),v("ul",[v("li",[a._v("relativeOffset：相对偏移量，表示消息相对于基准偏移量的偏移量，4个字节")]),a._v(" "),v("li",[a._v("position：物理地址，也就是消息在日志分段文件中对应的物理位置，4个字节")])]),a._v(" "),v("p",[a._v("时间戳索引项格式（12个字节）：")]),a._v(" "),v("ul",[v("li",[a._v("timestamp：当前日志分段最大的时间戳，8个字节")]),a._v(" "),v("li",[a._v("relativeOffset：时间戳所对应的消息的相对偏移量，4个字节")])]),a._v(" "),v("blockquote",[v("p",[a._v("根据偏移量查询消息：")]),a._v(" "),v("p",[a._v("定位日志分段：基于跳跃表的 ConcurrentSkipListMap(Key 为日志分段的基准偏移量) 保存日志分段，通过二分查找根据指定偏移量定位消息所在日志分段")]),a._v(" "),v("p",[a._v("计算相对偏移量：指定偏移量 - 基准偏移量，在对应偏移量索引文件中查找不大于相对偏移量的最大索引项，再根据物理地址从日志分段中顺序查找目标消息")])]),a._v(" "),v("p",[a._v("日志清理策略：")]),a._v(" "),v("ul",[v("li",[a._v("日志删除（Log Retention）：按照一定的保留策略直接删除不符合条件的日志分段\n"),v("ul",[v("li",[a._v("基于时间的保留策略：当前日志文件中是否有保留时间超过设定的阈值")]),a._v(" "),v("li",[a._v("基于日志大小的保留策略：当前日志文件的大小是否超过设定的阈值")]),a._v(" "),v("li",[a._v("基于日志起始偏移量的保留策略")])])]),a._v(" "),v("li",[a._v("日志压缩（Log Compaction）：整合每个消息的 key，对于有相同 key 不同 value 值，只保留最后一个版本")])])])}),[],!1,null,null,null);t.default=s.exports}}]);