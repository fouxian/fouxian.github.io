(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{521:function(t,s,e){"use strict";e.r(s);var a=e(34),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"web-servlet-容器-tomcat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-servlet-容器-tomcat"}},[t._v("#")]),t._v(" Web Servlet 容器 - Tomcat")]),t._v(" "),e("h2",{attrs:{id:"tomcat-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-总结"}},[t._v("#")]),t._v(" Tomcat 总结")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/kr/spring/Tomcat.png",alt:"Tomcat"}})]),t._v(" "),e("h2",{attrs:{id:"servlet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet"}},[t._v("#")]),t._v(" Servlet")]),t._v(" "),e("p",[t._v("Java Web 底层技术，处理 HTTP 请求返回 HTTP 响应，实现客户端和服务器的交互；Servlet 运行在 JVM 进程中，继承了 Java 特性，使得基于 Java 的 Servlet 应用更安全。")]),t._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("javax.servlet"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("servlet-api"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.5"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Servlet")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletConfig")]),t._v(" config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletConfig")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServletConfig")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServletInfo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("h3",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/kr/spring/Servlet-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:"Servlet 生命周期"}})]),t._v(" "),e("ol",[e("li",[t._v("init 初始化：\n"),e("ul",[e("li",[t._v("当客户端向 Servlet 容器发出 HTTP 请求访问 Servlet 时，Servlet 容器首先会解析请求，检查内存中是否已经有了该 Servlet 对象")]),t._v(" "),e("li",[t._v("如果有，则直接使用该 Servlet 对象")]),t._v(" "),e("li",[t._v("如果没有，则创建 Servlet 实例对象，然后通过调用 init() 方法实现 Servlet 的初始化工作（Servlet 是单例的，init() 方法只调用一次）")])])]),t._v(" "),e("li",[t._v("service 运行：\n"),e("ul",[e("li",[t._v("Servlet 容器会为每个请求创建代表 HTTP 请求的 ServletRequest 对象和代表 HTTP 响应的 ServletResponse 对象")]),t._v(" "),e("li",[t._v("然后将它们作为参数传递给 Servlet 的 service() 方法，再根据请求方式分别调用 doXXX 方法")]),t._v(" "),e("li",[t._v("service() 方法从 ServletRequest 对象中获得客户请求信息并处理该请求，通过 ServletResponse 对象生成响应结果")]),t._v(" "),e("li",[t._v("对于 Servlet 的每次访问请求，Servlet 容器都会调用一次 Servlet.service()，并且创建新的 ServletRequest 和 ServletResponse 对象")])])]),t._v(" "),e("li",[t._v("destroy 销毁：\n"),e("ul",[e("li",[t._v("当服务器关闭或 Web 应用被移除出容器时，Servlet 随着 Web 应用的关闭而销毁")]),t._v(" "),e("li",[t._v("在销毁 Servlet 之前，Servlet 容器会调用 Servlet.destroy()，以便让 Servlet 对象释放它所占用的资源")]),t._v(" "),e("li",[t._v("Servlet 对象一旦创建就会驻留在内存中等待客户端的访问，直到服务器关闭或 Web 应用被移除出容器时，Servlet 对象才会销毁")])])])]),t._v(" "),e("h3",{attrs:{id:"生命周期-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-总结"}},[t._v("#")]),t._v(" 生命周期-总结")]),t._v(" "),e("ol",[e("li",[t._v("Servlet 是一个由 Servlet 引擎使用的 Java 类，主要用于实现动态 Web 请求。")]),t._v(" "),e("li",[t._v("加载：当 Servlet 容器启动时，通过类加载器加载 Servlet 类；")]),t._v(" "),e("li",[t._v("实例化：加载成功后，容器通过反射机制实例化 Servlet 类；")]),t._v(" "),e("li",[t._v("初始化：容器调用 Servlet 的 init 方法初始化 Servlet；")]),t._v(" "),e("li",[t._v("调用服务：容器调用 Servlet 的 service 方法处理请求，并返回响应；")]),t._v(" "),e("li",[t._v("销毁：容器调用 Servlet 的destroy 方法释放资源，JVM 回收销毁 Servlet。")])]),t._v(" "),e("h3",{attrs:{id:"单实例多线程-非线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单实例多线程-非线程安全"}},[t._v("#")]),t._v(" 单实例多线程：非线程安全")]),t._v(" "),e("ul",[e("li",[t._v("Servlet 是单例的，是在第一次请求被执行时创建的（懒汉式）")]),t._v(" "),e("li",[t._v("在 Servlet 中，每个请求将生成一个轻量级线程处理，每个线程一旦执行完任务，就被销毁或放在线程池中等待回收")]),t._v(" "),e("li",[t._v("当多个线程同时访问同一个 Servlet 时，就很容易导致一些安全性问题")])]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("Servlet 的 init 和 destroy 方法只调用一次，是在单线程下执行的，不必考虑线程安全性；")]),t._v(" "),e("li",[t._v("Servlet 的 service 方法是在多线程下执行的，能够服务多个客户端请求，必须考虑线程安全性")])])]),t._v(" "),e("h3",{attrs:{id:"listener"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listener"}},[t._v("#")]),t._v(" Listener")]),t._v(" "),e("p",[t._v("Servlet Listener 是基于观察者模式设计，Servlet 提供了 8 个监听器接口（继承 EventListener 标记接口）：")]),t._v(" "),e("ol",[e("li",[t._v("Servlet Context：：ServletContextListener、ServletContextAttributeListener")]),t._v(" "),e("li",[t._v("Http Session：HttpSessionListener、HttpSessionActivationListener、HttpSessionAttributeListener、HttpSessionBindingListener")]),t._v(" "),e("li",[t._v("Servlet Request：ServletRequestListener、ServletRequestAttributeListener")])]),t._v(" "),e("p",[t._v("当相关的事件发生时，Servlet 容器会调用已经注册的监听器对应的方法实现监听逻辑。")]),t._v(" "),e("h3",{attrs:{id:"filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[t._v("#")]),t._v(" Filter")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 责任链设计模式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Filter")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterConfig")]),t._v(" filterConfig"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过滤请求，在 Servlet.service() 之前先调用，通过 FilterChain.doFilter() 将请求传递下去")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" doFilter "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterChain")]),t._v(" chain "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁：当 Web 容器调用这个方法之后，容器会再调用一次 doFilter 方法")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("h2",{attrs:{id:"cookie-和-session-作用与区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session-作用与区别"}},[t._v("#")]),t._v(" Cookie 和 Session 作用与区别")]),t._v(" "),e("ul",[e("li",[t._v("Cookie 是一种发送到客户浏览器的文本串句柄，数据保存在客户端，可以用来在某个WEB站点会话间持久的保持数据；")]),t._v(" "),e("li",[t._v("Session技术中所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录或具有某种权限。")]),t._v(" "),e("li",[t._v("共同之处：Cookie和Session都是用来跟踪浏览器用户身份的会话方式。")]),t._v(" "),e("li",[t._v("区别：Cookie数据保存在客户端，Session数据保存在服务器端")])]),t._v(" "),e("h2",{attrs:{id:"servlet-容器-tomcat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet-容器-tomcat"}},[t._v("#")]),t._v(" Servlet 容器 - Tomcat")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/kr/spring/Tomcat-Lifecycle.png",alt:"Tomcat-Lifecycle"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);