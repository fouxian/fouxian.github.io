(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{477:function(t,s,a){"use strict";a.r(s);var n=a(34),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分布式并行计算-mapreduce-概述及原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式并行计算-mapreduce-概述及原理"}},[t._v("#")]),t._v(" 分布式并行计算 MapReduce 概述及原理")]),t._v(" "),a("blockquote",[a("p",[t._v("MapReduce 是一种并行分布式计算模型，凭借其强大的并行计算能力和本地优先计算性，非常适合用于大规模数据集的并行计算。“Map”（映射）和“Reduce”（归约）是它的主要思想；实现是指定一个 Map（映射）函数，实现任务的分配，指定并发的 Reduce（归约）函数，用来任务的汇总")]),t._v(" "),a("p",[t._v("MapReduce 改变了组织大规模数据计算的方式，它代表了第一个有别于冯·诺依曼结构的计算模型，是在集群规模而非单个机器上组织大规模计算的新的抽象模型上的第一个重大突破，是到目前为止所见到的最为成功的基于大规模计算资源的计算模型。")])]),t._v(" "),a("p",[t._v("MapReduce 是一种面向大规模数据处理的并行计算模型、框架和平台，将运行于大规模集群上的复杂并行计算过程高度地抽象为两个函数：Map和Reduce，三层含义：")]),t._v(" "),a("ul",[a("li",[t._v("MapReduce 是一个并行程序设计模型与方法")]),t._v(" "),a("li",[t._v("MapReduce 是一个基于集群的高性能并行计算平台")]),t._v(" "),a("li",[t._v("MapReduce 是一个并行计算与运行软件框架")])]),t._v(" "),a("p",[t._v("主要功能：")]),t._v(" "),a("ul",[a("li",[t._v("数据划分/任务调度：划分数据块，并负责分配调度计算节点处理数据块，及监控节点执行状态")]),t._v(" "),a("li",[t._v("数据/代码互定位：为了减少数据通信，一个基本原则是本地化数据处理，即代码向数据迁移")]),t._v(" "),a("li",[t._v("系统优化：系统计算性能优化处理，如对最慢计算任务采用多备份执行、选最快完成者作为结果")]),t._v(" "),a("li",[t._v("出错检测和恢复：能检测并隔离出错节点，调度分配新节点接管出错节点的计算任务，还将用多备份冗余存储机制提高数据存储的可靠性，并能及时检测和恢复出错的数据")])]),t._v(" "),a("p",[t._v("优缺点：")]),t._v(" "),a("ul",[a("li",[t._v("易于编程：通过简单地实现一些接口，就可以完成一个 MapReduce 分布式计算程序")]),t._v(" "),a("li",[t._v("良好扩展：当计算资源无法满足时，可以通过简单的增加机器来扩展集群的计算能力")]),t._v(" "),a("li",[t._v("高容错性：MapReduce 分布式程序能够部署在廉价机器上，这就要求它具有高容错性")]),t._v(" "),a("li",[t._v("海量数据的离线处理：可以实现上千台服务器集群并发处理海量数据")]),t._v(" "),a("li",[t._v("不擅长/不适合：实时计算、流式计算、DAG（有向无环图）计算")])]),t._v(" "),a("h2",{attrs:{id:"编程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程模型"}},[t._v("#")]),t._v(" 编程模型")]),t._v(" "),a("p",[t._v("一个完整 MapReduce 作业由 n 个 Map 任务和 m 个 Reduce 任务组成，MapReduce 作业的并行计算过程是先将待处理数据切分为 n 个独立数据集，然后分别交由 n 个 Map 任务进行计算，将计算结果进行分区排序之后持久化到 Map 任务所在机器磁盘，之后由 Reduce 任务读取 Map 任务的输出结果并进行聚合计算。\nMapReduce 作业可以容忍 Map 任务或者 Reduce 任务失败，针对运行失败的任务会进行重试，而且为了避免出现木桶效应，可以开启推测执行机制，即针对运行时间比平均时间慢的任务再启动一个运行实例，等某个运行实例任务运行结束之后将其他任务杀掉，避免因为某个任务运行时间较长而延长整个作业的执行时间。\n"),a("img",{attrs:{src:"/images/kr/bigdata/hadoop/MapReduce-%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("Split：MapReduce 会根据输入文件计算输入分片，每个输入分片对应一个 Map 任务\n"),a("ul",[a("li",[t._v("输入分片存储的并非数据本身，而是一个分片长度和一个记录数据位置的数组")]),t._v(" "),a("li",[t._v("输入分片与 HDFS 块数据密切相关")])])]),t._v(" "),a("li",[t._v("Map：映射，调用 Map 函数处理接收到的分片，逐行执行并输出键值对")]),t._v(" "),a("li",[t._v("Combiner：该阶段可选，是 Map 计算后的一种本地化 Reduce 操作\n"),a("ul",[a("li",[t._v("在 Map 计算出中间结果前做一个简单的合并重复键值的操作")]),t._v(" "),a("li",[t._v("该阶段是有风险的，使用原则是 Combiner 的输出不会影响到 Reduce 计算的最终输入")])])]),t._v(" "),a("li",[t._v("Shuffle：将 Map 输出进一步处理并交给 Reduce，决定了 Map 输出如何高效地传送给 Reduce\n"),a("ul",[a("li",[t._v("Shuffle 阶段包含在 Map 和 Reduce 两个阶段中")]),t._v(" "),a("li",[t._v("Map-Shuffle 阶段是对 Map 的结果进行分区、排序和分隔，再将属于同一个分区的输出合并写到磁盘上，同时按照不同分区划分发送给对应的 Reduce 的整个过程")]),t._v(" "),a("li",[t._v("Reduce-Shuffle 阶段将各个 Map 输出的同一个分区划分的输出进行合并，再对合并的结果进行排序，最后交给 Reduce 处理的整个过程")])])]),t._v(" "),a("li",[t._v("Reduce：调用 Reduce 函数，将具有相同 key 的 value 进行处理后再输出新键值对作为最终结果")])]),t._v(" "),a("h3",{attrs:{id:"分片机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片机制"}},[t._v("#")]),t._v(" 分片机制")]),t._v(" "),a("p",[t._v("数据块：物理上的数据分块，是 HDFS 的数据存储单位\n数据分片：逻辑上的数据分片，是 MapReduce 计算输入数据的单位\nMapTask 并行度与分片机制：")]),t._v(" "),a("ul",[a("li",[t._v("MapTask 并行度决定 Map 阶段任务处理并发度，进而影响整个 Job 处理速度")]),t._v(" "),a("li",[t._v("一个 Job 的 Map 并行度由客户端在提交 Job 时的分片数决定，一个分片启动一个 MapTask")]),t._v(" "),a("li",[t._v("简单按照文件内容长度进行分片，默认情况下，数据分片大小为数据块大小")]),t._v(" "),a("li",[t._v("分片时不考虑数据集整体，而是逐个针对每一个文件单独分片")])]),t._v(" "),a("p",[t._v("FileInputFormat 接口实现类：\nTextInputFormat：")]),t._v(" "),a("h3",{attrs:{id:"map-shuffle-阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-shuffle-阶段"}},[t._v("#")]),t._v(" Map-Shuffle 阶段")]),t._v(" "),a("ul",[a("li",[t._v("Map 输出时会在内存里开启一个环形内存缓存区，并为 Map 输出操作启动一个守护线程")]),t._v(" "),a("li",[t._v("分隔：若缓存区内存达到了阈值（默认 80%），则该守护线程会把这 80% 内存区内容写到磁盘上，另外 20% 内存可以供 Map 输出继续使用")]),t._v(" "),a("li",[t._v("写入磁盘和写入内存操作是互不干扰的，若缓存区满了，那么 Map 就会阻塞写入内存操作，待写入磁盘操作完成后再继续执行写入内存操作")]),t._v(" "),a("li",[t._v("缓存区内容分隔到磁盘前，会首先进行分区操作，分区数目由 Reduce 数目决定，然后对每个分区，后台线程还会按照键值对将需要写出的数据进行排序")]),t._v(" "),a("li",[t._v("若配置 Combiner 函数，则进行 Combiner 操作，以使更少地数据被写入磁盘并发送给 Reducer")]),t._v(" "),a("li",[t._v("每次分隔操作都会生成一个分隔文件，全部 Map 输出完成后，可能会有很多分隔文件")]),t._v(" "),a("li",[t._v("因此在 Map 任务结束前，还要进行合并操作，即将这些分隔文件按照分区合并为单独文件")]),t._v(" "),a("li",[t._v("在合并过程中，同样也会进行排序，若定义 Combiner 函数，则进行 Combiner 操作")]),t._v(" "),a("li",[t._v("至此，Map 阶段的所有工作都已结束，最终生成的文件也会存放在某个本地目录内")]),t._v(" "),a("li",[t._v("每个 Reduce 不断地获取 Map 是否完成的信息，若 Reduce 得到通知，获知某个 Map 执行完成，Reduce-Shuffle 阶段便开始启动")])]),t._v(" "),a("h3",{attrs:{id:"reduce-shuffle-阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-shuffle-阶段"}},[t._v("#")]),t._v(" Reduce-Shuffle 阶段")]),t._v(" "),a("p",[t._v("可以分为三个子阶段：Copy Map 输出、Merge 阶段和 Reduce 处理")]),t._v(" "),a("ul",[a("li",[t._v("Copy Map 输出：Reduce 任务启动 Copy 线程，通过 HTTP 请求复制 Map 输出文件")]),t._v(" "),a("li",[t._v("Merge 阶段：复制过来的数据会首先放入内存缓冲区中进行合并")]),t._v(" "),a("li",[t._v("Reduce 处理：不断合并后，最后会生成一个最终结果（可能在内存，也可能在磁盘），至此 Reduce 输入准备完毕，下一步就是 Reduce 操作")])]),t._v(" "),a("p",[t._v("一个完整 MapReduce 程序在分布式运行时有三类实例进程（MR 程序运行在 YARN 上）")]),t._v(" "),a("ul",[a("li",[t._v("MrAppMaster：负责整个程序的过程调度及状态协调")]),t._v(" "),a("li",[t._v("MapTask：负责 Map 阶段的整个数据处理流程")]),t._v(" "),a("li",[t._v("ReduceTask：负责 Reduce 阶段的整个数据处理流程")])]),t._v(" "),a("h2",{attrs:{id:"运行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行机制"}},[t._v("#")]),t._v(" 运行机制")]),t._v(" "),a("h3",{attrs:{id:"maptask-工作机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maptask-工作机制"}},[t._v("#")]),t._v(" MapTask 工作机制")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/kr/bigdata/hadoop/MapTask-%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png",alt:""}})]),t._v(" "),a("ol",[a("li",[t._v("Read 阶段：MapTask 通过 RecordReader(默认 LineRecordReader)，从 InputSplit 中以 \\n 分隔符进行读取，读取每一行并解析出成 <k,v>\n"),a("ul",[a("li",[t._v("k 表示每行首字符偏移值，v 表示这一行文本内容")])])]),t._v(" "),a("li",[t._v("Map 阶段：该阶段主要是将解析出的 <k,v> 交给用户编写的 map() 函数处理，并产生新的 <k,v>")]),t._v(" "),a("li",[t._v("Collect 阶段：Map 处理完成后，一般调用 OutputCollector.collect() 进行数据收集\n"),a("ul",[a("li",[t._v("并调用 HashPartitioner 进行分区处理，同时写入一个环形内存缓冲区中")]),t._v(" "),a("li",[t._v("Partitioner 接口：根据 k/v 及 Reduce 数量决定当前这对输出数据应该交由哪个 ReduceTask 处理，默认 key hash 后再以 Reduce 数量取模")])])]),t._v(" "),a("li",[t._v("Spill 阶段：当环形缓冲区满80%后，MapReduce 会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序（先对partition排序，在对key排序保证每个分区内有序），并在必要时对数据进行合并压缩操作。")])]),t._v(" "),a("p",[t._v("①利用快速排序算法对缓存区内的数据进行排序，排序方式是先按照分区编号排序，然后按照key排序。经过排序后数据以分区为单位聚集在一起，且统一分区内所有数据按照key有序；")]),t._v(" "),a("p",[t._v("②按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件output/spillN.out（N代表当前溢写次数）中。如果用户设置了Combiner则写入文件之前，对每个分区中的数据进行一次聚集操作；")]),t._v(" "),a("p",[t._v("③将分区数据的元信息写到内存索引数据结构SpillRecord中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件output/spliiN.out.index中")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("Combine 阶段：当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。")])]),t._v(" "),a("p",[t._v("所有数据处理完后，MapTask会将所有临时文件合并成一个大文件，并保存到文件output/file.out中，同时生成相对应的索引文件output/file.out.index")]),t._v(" "),a("p",[t._v("在文件合并过程中，MapTask以分区为单位进行合并。对于某个分区，它将采用多伦递归合并的方式，每轮合并io.sort.factor（默认10）个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件")]),t._v(" "),a("p",[t._v("让每个MapTask最终只会生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销")]),t._v(" "),a("h3",{attrs:{id:"reducetask-工作机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reducetask-工作机制"}},[t._v("#")]),t._v(" ReduceTask 工作机制")]),t._v(" "),a("h3",{attrs:{id:"shuffle-机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shuffle-机制"}},[t._v("#")]),t._v(" Shuffle 机制")]),t._v(" "),a("h2",{attrs:{id:"编程规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程规范"}},[t._v("#")]),t._v(" 编程规范")]),t._v(" "),a("ul",[a("li",[t._v("Map 阶段\n"),a("ul",[a("li",[t._v("设置 InputFormat 类, 将数据切分为 "),a("strong",[t._v("(K1，V1)")]),t._v(" 对")]),t._v(" "),a("li",[t._v("自定义 Map 逻辑, 将 "),a("strong",[t._v("(K1，V1)")]),t._v(" 对转换成 "),a("strong",[t._v("(K2，V2)")]),t._v(" 对，输出结果")])])]),t._v(" "),a("li",[t._v("Shuffle 阶段\n"),a("ul",[a("li",[t._v("对输出的 "),a("strong",[t._v("(K2，V2)")]),t._v(" 对进行"),a("strong",[t._v("分区")])]),t._v(" "),a("li",[t._v("对不同分区的数据按照相同 Key "),a("strong",[t._v("排序")])]),t._v(" "),a("li",[t._v("(可选) 对分组过的数据初步"),a("strong",[t._v("规约")]),t._v(", 降低数据的网络拷贝")]),t._v(" "),a("li",[t._v("对数据进行"),a("strong",[t._v("分组")]),t._v(", 相同 Key 的 Value 放入一个集合中")])])]),t._v(" "),a("li",[t._v("Reduce 阶段\n"),a("ul",[a("li",[t._v("对多个 Map 结果进行排序合并, 编写 Reduce 函数实现对输入的 Key-Value 进行处理, 转为 "),a("strong",[t._v("(K3，V3)")]),t._v(" 输出")]),t._v(" "),a("li",[t._v("设置 OutputFormat 处理并保存 Reduce 输出的 Key-Value 数据")])])])]),t._v(" "),a("h3",{attrs:{id:"mapper-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mapper-类"}},[t._v("#")]),t._v(" Mapper 类")]),t._v(" "),a("div",{staticClass:"language-java Mapper.java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hadoop-3.2.2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@InterfaceAudience.Public")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@InterfaceStability.Stable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mapper")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("KEYIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VALUEIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KEYOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VALUEOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MapContext")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("KEYIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("VALUEIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("KEYOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("VALUEOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Mapper 类当中的初始化方法")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KEYIN")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VALUEIN")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KEYOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VALUEOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取每一行数据，调用该方法处理")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整个 maptask 执行完成之后，会马上调用该方法，主要是用于做一些清理工作，例如连接的断开，资源的关闭等等")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更精确地控制 MapTask 的执行")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextKeyValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br")])]),a("h3",{attrs:{id:"reduce-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-类"}},[t._v("#")]),t._v(" Reduce 类")]),t._v(" "),a("div",{staticClass:"language-java Reduce.java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hadoop-3.2.2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Checkpointable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@InterfaceAudience.Public")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@InterfaceStability.Stable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Reducer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("KEYIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("VALUEIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("KEYOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("VALUEOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReduceContext")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("KEYIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("VALUEIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("KEYOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("VALUEOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reduce 类的初始化方法")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KEYIN")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("VALUEIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理从 MapTask 发送过来的数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VALUEIN value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KEYOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VALUEOUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整个 Reducetask 执行完成之后，会马上调用该方法，主要是用于做一些清理工作，例如连接的断开，资源的关闭等等")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更精确地控制 ReduceTask 的执行")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValues")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a back up store is used, reset it")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("VALUEIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValues")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iter "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReduceContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ValueIterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReduceContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ValueIterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("VALUEIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resetBackupStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br")])]),a("h2",{attrs:{id:"运行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行模式"}},[t._v("#")]),t._v(" 运行模式")]),t._v(" "),a("h3",{attrs:{id:"本地运行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地运行模式"}},[t._v("#")]),t._v(" 本地运行模式")]),t._v(" "),a("div",{staticClass:"language-properties line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本地运行模式：MapReduce 程序是被提交给 LocalJobRunner 在本地以单进程形式运行，而处理的数据及输出结果可以在本地文件系统，也可以在 hdfs 上")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本地模式非常便于进行业务逻辑的 debug，只要在 idea 中打断点即可")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本地运行模式配置参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("mapreduce.framework.name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("local")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("yarn.resourcemanager.hostname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("local")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"集群运行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群运行模式"}},[t._v("#")]),t._v(" 集群运行模式")]),t._v(" "),a("p",[t._v("将 MapReduce 程序提交给 YARN 集群，分发到很多节点上并发执行，处理的数据和输出结果应该位于 hdfs 文件系统上，提交集群的实现：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将程序打成 JAR 包，然后在集群的任意一个节点上用 hadoop 命令启动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" jar hadoop_hdfs_operate-1.0-SNAPSHOT.jar cn.itcast.hdfs.demo1.JobMain\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"序列化与反序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列化与反序列化"}},[t._v("#")]),t._v(" 序列化与反序列化")]),t._v(" "),a("ul",[a("li",[t._v("序列化：将内存对象转为字节序列，用于磁盘存储和网络传输")]),t._v(" "),a("li",[t._v("反序列化：将字节序列转为内存对象，用于内存计算使用")])]),t._v(" "),a("p",[t._v("Java 序列化是一个重量级序列化框架(Serializable)，一个对象被序列化后会附带额外的信息，不便于网络传输，Hadoop 开发了一套序列化机制(Writable)，特点：")]),t._v(" "),a("ul",[a("li",[t._v("紧凑：高效使用存储空间")]),t._v(" "),a("li",[t._v("快速：读写数据额外开销小")]),t._v(" "),a("li",[t._v("交互操作：支持多语言交互")])]),t._v(" "),a("p",[t._v("Bean 对象的序列化和反序列化实现：")]),t._v(" "),a("ul",[a("li",[t._v("必须实现 Writable 接口")]),t._v(" "),a("li",[t._v("反序列化时，需要反射调用空参构造函数，故必须有空参构造函数")]),t._v(" "),a("li",[t._v("重写序列化方法和方序列化方法（顺序完全一致）")]),t._v(" "),a("li",[t._v("若想把结果显示在文件中，需重写 toString()")]),t._v(" "),a("li",[t._v("若 Bean 对象放在 key 中传输，则需实现 Comparable 接口，因 Shuffle 阶段要求 key 必须能排序")])])])}),[],!1,null,null,null);s.default=e.exports}}]);