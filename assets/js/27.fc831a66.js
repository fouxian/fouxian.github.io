(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{482:function(s,t,a){"use strict";a.r(t);var n=a(34),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"hive-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hive-function"}},[s._v("#")]),s._v(" Hive Function")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看 Hive 的内置函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("describe")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" FUNC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看指定函数的描述信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("describe")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extended")]),s._v(" FUNC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看指定函数的扩展信息")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"like-rlike-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#like-rlike-运算符"}},[s._v("#")]),s._v(" Like/RLike 运算符")]),s._v(" "),a("ul",[a("li",[s._v("% ：代表任意个字符")]),s._v(" "),a("li",[s._v("_ ：代表一个字符")])]),s._v(" "),a("p",[s._v("RLIKE 是 Hive 中 Like 的扩展，其可以通过 Java 正则表达式这个更强大的语言来指定匹配条件，等价于 REGEXP 运算符")]),s._v(" "),a("h2",{attrs:{id:"join-连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join-连接"}},[s._v("#")]),s._v(" Join 连接")]),s._v(" "),a("ul",[a("li",[s._v("内连接(inner join)：只有进行连接的两个表中都存在与条件相匹配的数据才会被保留下来")]),s._v(" "),a("li",[s._v("左外连接(left join)：JOIN 操作符左边表中符合 WHERE 子句的所有记录将会被返回")]),s._v(" "),a("li",[s._v("右外连接(right join)：JOIN 操作符右边表中符合 WHERE 子句的所有记录将会被返回")]),s._v(" "),a("li",[s._v("满外连接(full join)：将会返回所有表中符合 WHERE 语句条件的所有记录，如果任一表的指定字段没有符合条件的值，那么就使用 NULL 值替代")])]),s._v(" "),a("blockquote",[a("p",[s._v("大多数情况下， Hive 按照从左到右的顺序对每对 JOIN 连接对象启动一个 MapReduce 作业\n优化：当对 3 个或更多表进行 join 连接时，如果每个 on 子句都使用相同的连接键，则只会产生一个 MapReduce job")])]),s._v(" "),a("h2",{attrs:{id:"笛卡尔积"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#笛卡尔积"}},[s._v("#")]),s._v(" 笛卡尔积")]),s._v(" "),a("p",[s._v("产生条件：省略连接条件、连接条件无效、所有表中所有行互相连接")]),s._v(" "),a("h2",{attrs:{id:"order-by-sort-by-distribute-by-cluster-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-by-sort-by-distribute-by-cluster-by"}},[s._v("#")]),s._v(" Order By/Sort By/Distribute By/Cluster By")]),s._v(" "),a("ul",[a("li",[s._v("Order By：全局排序，只有一个 Reducer，多个 Reducer 无法保证全局有序\n"),a("ul",[a("li",[s._v("ASC：升序(默认)、DESC：降序")]),s._v(" "),a("li",[s._v("对于大规模的数据集，需要较长的计算时间，效率非常低")])])]),s._v(" "),a("li",[s._v("Sort By：为每个 Reducer 产生一个排序文件，每个 Reducer 内部进行排序\n"),a("ul",[a("li",[s._v("Sort By 只保证每个 Reducer 的输出有序，不保证全局有序")])])]),s._v(" "),a("li",[s._v("Distribute By：按照指定的字段对数据进行划分输出到不同的 Reduce 中\n"),a("ul",[a("li",[s._v("类似于分区概念，通常结合 Sort By 使用")])])]),s._v(" "),a("li",[s._v("Cluster By：当 Distribute By 和 Sort By 字段相同时，等价于 cluster by\n"),a("ul",[a("li",[s._v("同时具有 distribute by/Sort by 功能，但排序只能是升序")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("Distribute by 的分区规则是根据分区字段的 hash 码与 Reduce 个数进行模除后，余数相同的分到一个区\nHive 要求 DISTRIBUTE BY 语句要写在 SORT BY 语句之前")])]),s._v(" "),a("h2",{attrs:{id:"json-解析函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-解析函数"}},[s._v("#")]),s._v(" Json 解析函数")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("get_json_object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("json_txt, path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" - 从 Json 字符串中解析出指定的 key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("一次只能解析出一个"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \njson_tuple"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonStr, p1, p2, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., pn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" - 从 Json 字符串中解析出多个指定的 key\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("NVL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("default_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("：空字段赋值，若 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("value")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v("，则返回 default_value，否则返回 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("value")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"行列互转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行列互转"}},[s._v("#")]),s._v(" 行列互转")]),s._v(" "),a("p",[s._v("行转列相关函数：")]),s._v(" "),a("ul",[a("li",[s._v("concat(str1, str2, ... strN)：返回输入字符串连接后的结果，支持任意个输入字符串")]),s._v(" "),a("li",[s._v("concat_ws(separator, [string | array(string)]+)：特殊形式的 concat()，第一个参数为后面参数间的分隔符，这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔将被加到连接的字符串之间")]),s._v(" "),a("li",[s._v("collect_set(x)：函数只接受基本数据类型，它的主要作用是将某字段值进行去重汇总，产生 Array 类型字段")])]),s._v(" "),a("p",[s._v("列转行相关函数：")]),s._v(" "),a("ul",[a("li",[s._v("explode(col)：将 Hive 一列中复杂的 Array/Map 结构拆分成多行")]),s._v(" "),a("li",[s._v("lateral view：LATERAL VIEW udtf(expression) tableAlias AS columnAlias；用于和 split/explode 等 UDTF 一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合")])]),s._v(" "),a("h2",{attrs:{id:"窗口-开窗-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗口-开窗-函数"}},[s._v("#")]),s._v(" 窗口(开窗)函数")]),s._v(" "),a("p",[s._v("集合函数可以将多行数据按照规则聚集为一行，一般来讲聚集后的行数是要少于聚集前的行数，但是有时想要显示聚集前的数据，又要显示聚集后的数据，这时便引入了窗口函数，\n窗口函数又叫 OLAP 函数/分析函数，窗口函数兼具分组和排序功能，窗口函数最重要的关键字是 partition by 和 order by，\n具体语法如下："),a("code",[s._v("over (partition by xxx order by xxx)")])]),s._v(" "),a("ul",[a("li",[s._v("OVER()：指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化")]),s._v(" "),a("li",[s._v("CURRENT ROW：当前行")]),s._v(" "),a("li",[s._v("n PRECEDING：往前 n 行")]),s._v(" "),a("li",[s._v("n FOLLOWING：往后 n 行")]),s._v(" "),a("li",[s._v("UNBOUNDED PRECEDING：表示从前面的起点")]),s._v(" "),a("li",[s._v("UNBOUNDED FOLLOWING：表示到后面的终点")]),s._v(" "),a("li",[s._v("LAG(col, n, default_val)：统计窗口内往前第 n 行")]),s._v(" "),a("li",[s._v("LEAD(col, n, default_val)：统计窗口内往后第 n 行")]),s._v(" "),a("li",[s._v("FIRST_VALUE：取分组内排序后，截止到当前行，第一个值")]),s._v(" "),a("li",[s._v("LAST_VALUE：取分组内排序后，截止到当前行，最后一个值")]),s._v(" "),a("li",[s._v("GROUPING SETS：一种将多个 GROUP BY 写在一个 SQL 语句中的便利写法，等价于将不同维度的 GROUP BY 结果集进行 UNION ALL")]),s._v(" "),a("li",[s._v("CUBE：根据 GROUP BY 的维度的所有组合进行聚合")]),s._v(" "),a("li",[s._v("ROLLUP：CUBE 的子集，以最左侧的维度为主，从该维度进行层级聚合")]),s._v(" "),a("li",[s._v("NTILE(n)：把有序窗口的行分发到指定数据的组中，各个组有编号(从 1 开始)，对于每一行，返回此行所属组的编号")])]),s._v(" "),a("div",{staticClass:"language-txt bussiness.txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("jack,2017-01-01,10\ntony,2017-01-02,15\njack,2017-02-03,23\ntony,2017-01-04,29\njack,2017-01-05,46\njack,2017-04-06,42\ntony,2017-01-07,50\njack,2017-01-08,55\nmart,2017-04-08,62\nmart,2017-04-09,68\nneil,2017-05-10,12\nmart,2017-04-11,75\nneil,2017-06-12,80\nmart,2017-04-13,94\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" bussiness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" orderdate string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cost "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROW")]),s._v(" FORMAT DELIMITED "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FIELDS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TERMINATED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LOAD")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATA")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LOCAL")]),s._v(" INPATH "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bussiness.txt'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" bussiness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询在 2017 年 4 月份购买过的顾客及总人数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" bussiness "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2017-04'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询顾客的购买明细及月总额")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" bussiness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 将每个顾客的 cost 按照日期进行累加，rows 必须跟在 order by 子句之后，对排序的结果进行限制，使用固定的行数来限制分区中的数据行数量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sample1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 所有行相加")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sample2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 按 name 分组，组内数据相加")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sample3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 按 name 分组，组内数据累加")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 与 sample3 一样，由起点到当前行集合")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNBOUNDED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRECEDING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sample4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 当前行和前面一行集合")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRECEDING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sample5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 当前行和前面一行及后面一行集合")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRECEDING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOLLOWING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sample6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 当前行及后面所有行集合")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROW")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNBOUNDED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOLLOWING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sample7\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" bussiness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看顾客上次购买时间")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \nlag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1900-01-01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" time1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\nlag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" time2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" bussiness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询前 20% 时间的订单信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ntile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" orderdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sorted "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" bussiness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" sorted "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[a("img",{attrs:{src:"/images/kr/bigdata/hive/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B.png",alt:""}}),s._v(" "),a("img",{attrs:{src:"/images/kr/bigdata/hive/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B2.png",alt:""}}),s._v(" "),a("img",{attrs:{src:"/images/kr/bigdata/hive/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B3.png",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"rank"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rank"}},[s._v("#")]),s._v(" Rank")]),s._v(" "),a("p",[s._v("RANK()：排序相同时会重复，总数不会变\nDENSE_RANK()：排序相同时会重复，总数会减少\nROW_NUMBER()：会根据顺序计算")]),s._v(" "),a("h2",{attrs:{id:"自定义函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义函数"}},[s._v("#")]),s._v(" 自定义函数")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://cwiki.apache.org/confluence/display/Hive/HivePlugins",target:"_blank",rel:"noopener noreferrer"}},[s._v("Custom UDFs"),a("OutboundLink")],1),s._v("，用户自定义函数，分为三类：")]),s._v(" "),a("ul",[a("li",[s._v("UDF：User-Defined-Function，一进一出")]),s._v(" "),a("li",[s._v("UDAF：User-Defined Aggregation Function，聚集函数，多进一出")]),s._v(" "),a("li",[s._v("UDTF：User-Defined Table-Generating Functions，一进多出")])]),s._v(" "),a("p",[s._v("编程步骤：")]),s._v(" "),a("ul",[a("li",[s._v("继承 Hive 提供的类并实现类中抽象分发：\n"),a("ul",[a("li",[s._v("org.apache.hadoop.hive.ql.udf.generic.GenericUDF")]),s._v(" "),a("li",[s._v("org.apache.hadoop.hive.ql.udf.generic.GenericUDTF")])])]),s._v(" "),a("li",[s._v("添加 Jar 并创建函数")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" jar linux_jar_path\ncreate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("temporary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("dbname."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("function_name AS class_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ndrop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("temporary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("if exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("dbname."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);